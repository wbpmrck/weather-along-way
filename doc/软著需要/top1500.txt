function findCity(codeWithFourLength){
    // console.log(`find city:${codeWithFourLength}`)
    if(codeWithFourLength && codeWithFourLength.length >4){
        codeWithFourLength = codeWithFourLength.substr(0,4);
    }
    for(let k in cityCodes){
        if(cityCodes[k].toString().substr(0,4)==codeWithFourLength){
            
            // console.log(`found city:${k}`)
            return k;
        }
    }
}
module.exports ={
    findCity
}
class Cache {
  data = undefined;
  expire = undefined;
  setTime = undefined; //缓存设置时间
  constructor(expireSeconds){
    this.expire = expireSeconds|| 60;
  }
  // 判断缓存是否过期
  isExpire(){
    return  (+new Date())- (+this.setTime) > this.expire * 1000
  }
  // 重新设置新值
  setVal(data){
    this.data = data;
    this.setTime = new Date();
  }
}


// 业务层需要缓存的数据
let cachedData = {};

function getCachedData(key){
  let d = cachedData[key];
  if(d && !d.isExpire()){
    return d.data;
  }else{
    return undefined;
  }
}
function setCacheData(key,val,expireSeconds){
  let d = cachedData[key];
  if(!d){
    d = new Cache(expireSeconds);
  }
  d.setVal(val);
  cachedData[key] = d;
  return true;
}

module.exports = {
  Cache,
  getCachedData,
  setCacheData
}
//维护所有编码和含义的转化关系

const weather = {
  "00":"晴",
  "01":"多云",
  "02":"阴",
  "03":"阵雨",
  "04":"雷阵雨",
  "05":"雷阵雨伴有冰雹",
  "06":"雨夹雪",
  "07":"小雨",
  "08":"中雨",
  "09":"大雨",
  "10":"暴雨",
  "11":"大暴雨",
  "12":"特大暴雨",
  "13":"阵雪",
  "14":"小雪",
  "15":"中雪",
  "16":"大雪",
  "17":"暴雪",
  "18":"雾",
  "19":"冻雨",
  "20":"沙尘暴",
  "21":"小到中雨",
  "22":"中到大雨",
  "23":"大到暴雨",
  "24":"暴雨到大暴雨",
  "25":"大暴雨到特大暴雨",
  "26":"小到中雪",
  "27":"中到大雪",
  "28":"大到暴雪",
  "29":"浮尘",
  "30":"扬沙",
  "31":"强沙尘暴",
  "32":"浓雾",
  "49":"强浓雾",
  "53":"霾",
  "54":"中度霾",
  "55":"重度霾",
  "56":"严重霾",
  "58":"特强浓雾",
  "99":"无",
  "301":"雨",
  "302":"雪",
}
function isNotGood(weatherCode,windPower){
  if(weatherCode > "02" || windPower > "5"){
    return true;
  }else{
    return false;
  }
}
module.exports = {
  weather,
  isNotGood,
}
/*
  用于根据查询的城市站点信息，自动模拟返回天气数据
*/
import moment from "../../libs/moment/moment-wrapper"

let mockDataTemplate = {
  "forecast": {
      "12h": {
          "101010100": {
              "000": "202105041200",
              "1001001": [
                  {
                      "000": "20210504080000~20210504200000",
                      "001": "01",
                      "005": "7",
                      "004": "2",
                      "003": "16",
                      "002": "24"
                  },
                  {
                      "000": "20210504200000~20210505080000",
                      "001": "01",
                      "005": "7",
                      "004": "0",
                      "003": "10",
                      "002": "17"
                  },
                  {
                      "000": "20210505080000~20210505200000",
                      "001": "00",
                      "005": "5",
                      "004": "1",
                      "003": "15",
                      "002": "27"
                  },
                  {
                      "000": "20210505200000~20210506080000",
                      "001": "00",
                      "005": "5",
                      "004": "0",
                      "003": "16",
                      "002": "23"
                  },
                  {
                      "000": "20210506080000~20210506200000",
                      "001": "01",
                      "005": "7",
                      "004": "2",
                      "003": "16",
                      "002": "28"
                  },
                  {
                      "000": "20210506200000~20210507080000",
                      "001": "01",
                      "005": "7",
                      "004": "2",
                      "003": "14",
                      "002": "18"
                  },
                  {
                      "000": "20210507080000~20210507200000",
                      "001": "00",
                      "005": "7",
                      "004": "2",
                      "003": "14",
                      "002": "25"
                  },
                  {
                      "000": "20210507200000~20210508080000",
                      "001": "00",
                      "005": "8",
                      "004": "1",
                      "003": "12",
                      "002": "19"
                  },
                  {
                      "000": "20210508080000~20210508200000",
                      "001": "01",
                      "005": "3",
                      "004": "1",
                      "003": "20",
                      "002": "30"
                  },
                  {
                      "000": "20210508200000~20210509080000",
                      "001": "01",
                      "005": "3",
                      "004": "0",
                      "003": "15",
                      "002": "23"
                  },
                  {
                      "000": "20210509080000~20210509200000",
                      "001": "01",
                      "005": "8",
                      "004": "0",
                      "003": "16",
                      "002": "27"
                  },
                  {
                      "000": "20210509200000~20210510080000",
                      "001": "00",
                      "005": "8",
                      "004": "1",
                      "003": "15",
                      "002": "22"
                  },
                  {
                      "000": "20210510080000~20210510200000",
                      "001": "00",
                      "005": "4",
                      "004": "1",
                      "003": "18",
                      "002": "26"
                  },
                  {
                      "000": "20210510200000~20210511080000",
                      "001": "00",
                      "005": "4",
                      "004": "0",
                      "003": "13",
                      "002": "19"
                  }
              ]
          }
      },
      "1h": {
          "101010100": {
              "1001001": [
                  {
                      "000": "20210504110000",
                      "001": "00",
                      "004": "7",
                      "003": "1",
                      "002": "22"
                  },
                  {
                      "000": "20210504120000",
                      "001": "01",
                      "004": "7",
                      "003": "0",
                      "002": "22"
                  },
                  {
                      "000": "20210504130000",
                      "001": "01",
                      "004": "7",
                      "003": "1",
                      "002": "23"
                  },
                  {
                      "000": "20210504140000",
                      "001": "01",
                      "004": "7",
                      "003": "1",
                      "002": "23"
                  },
                  {
                      "000": "20210504150000",
                      "001": "01",
                      "004": "7",
                      "003": "1",
                      "002": "22"
                  },
                  {
                      "000": "20210504160000",
                      "001": "01",
                      "004": "7",
                      "003": "2",
                      "002": "21"
                  },
                  {
                      "000": "20210504170000",
                      "001": "01",
                      "004": "7",
                      "003": "2",
                      "002": "20"
                  },
                  {
                      "000": "20210504180000",
                      "001": "01",
                      "004": "7",
                      "003": "2",
                      "002": "19"
                  },
                  {
                      "000": "20210504190000",
                      "001": "01",
                      "004": "7",
                      "003": "1",
                      "002": "17"
                  },
                  {
                      "000": "20210504200000",
                      "001": "00",
                      "004": "7",
                      "003": "0",
                      "002": "16"
                  },
                  {
                      "000": "20210504210000",
                      "001": "00",
                      "004": "7",
                      "003": "0",
                      "002": "15"
                  },
                  {
                      "000": "20210504220000",
                      "001": "00",
                      "004": "7",
                      "003": "0",
                      "002": "14"
                  },
                  {
                      "000": "20210504230000",
                      "001": "00",
                      "004": "7",
                      "003": "0",
                      "002": "13"
                  },
                  {
                      "000": "20210505000000",
                      "001": "00",
                      "004": "7",
                      "003": "0",
                      "002": "12"
                  },
                  {
                      "000": "20210505010000",
                      "001": "00",
                      "004": "7",
                      "003": "0",
                      "002": "12"
                  },
                  {
                      "000": "20210505020000",
                      "001": "00",
                      "004": "7",
                      "003": "0",
                      "002": "11"
                  },
                  {
                      "000": "20210505030000",
                      "001": "00",
                      "004": "6",
                      "003": "0",
                      "002": "10"
                  },
                  {
                      "000": "20210505040000",
                      "001": "00",
                      "004": "6",
                      "003": "0",
                      "002": "10"
                  },
                  {
                      "000": "20210505050000",
                      "001": "00",
                      "004": "7",
                      "003": "0",
                      "002": "10"
                  },
                  {
                      "000": "20210505060000",
                      "001": "00",
                      "004": "6",
                      "003": "0",
                      "002": "12"
                  },
                  {
                      "000": "20210505070000",
                      "001": "00",
                      "004": "6",
                      "003": "0",
                      "002": "15"
                  },
                  {
                      "000": "20210505080000",
                      "001": "00",
                      "004": "7",
                      "003": "0",
                      "002": "17"
                  },
                  {
                      "000": "20210505090000",
                      "001": "00",
                      "004": "7",
                      "003": "1",
                      "002": "19"
                  },
                  {
                      "000": "20210505100000",
                      "001": "00",
                      "004": "6",
                      "003": "0",
                      "002": "21"
                  },
                  {
                      "000": "20210505110000",
                      "001": "00",
                      "004": "5",
                      "003": "0",
                      "002": "22"
                  },
                  {
                      "000": "20210505120000",
                      "001": "00",
                      "004": "6",
                      "003": "0",
                      "002": "23"
                  },
                  {
                      "000": "20210505130000",
                      "001": "00",
                      "004": "5",
                      "003": "1",
                      "002": "24"
                  },
                  {
                      "000": "20210505140000",
                      "001": "00",
                      "004": "5",
                      "003": "1",
                      "002": "26"
                  },
                  {
                      "000": "20210505150000",
                      "001": "00",
                      "004": "5",
                      "003": "1",
                      "002": "26"
                  },
                  {
                      "000": "20210505160000",
                      "001": "00",
                      "004": "5",
                      "003": "2",
                      "002": "27"
                  },
                  {
                      "000": "20210505170000",
                      "001": "00",
                      "004": "5",
                      "003": "1",
                      "002": "26"
                  },
                  {
                      "000": "20210505180000",
                      "001": "00",
                      "004": "5",
                      "003": "0",
                      "002": "25"
                  },
                  {
                      "000": "20210505190000",
                      "001": "00",
                      "004": "5",
                      "003": "1",
                      "002": "24"
                  },
                  {
                      "000": "20210505200000",
                      "001": "00",
                      "004": "5",
                      "003": "1",
                      "002": "23"
                  },
                  {
                      "000": "20210505210000",
                      "001": "00",
                      "004": "5",
                      "003": "0",
                      "002": "22"
                  },
                  {
                      "000": "20210505220000",
                      "001": "00",
                      "004": "5",
                      "003": "0",
                      "002": "21"
                  },
                  {
                      "000": "20210505230000",
                      "001": "00",
                      "004": "5",
                      "003": "0",
                      "002": "20"
                  },
                  {
                      "000": "20210506000000",
                      "001": "00",
                      "004": "5",
                      "003": "0",
                      "002": "19"
                  },
                  {
                      "000": "20210506010000",
                      "001": "00",
                      "004": "5",
                      "003": "0",
                      "002": "19"
                  },
                  {
                      "000": "20210506020000",
                      "001": "00",
                      "004": "5",
                      "003": "0",
                      "002": "18"
                  },
                  {
                      "000": "20210506030000",
                      "001": "00",
                      "004": "5",
                      "003": "0",
                      "002": "17"
                  },
                  {
                      "000": "20210506040000",
                      "001": "00",
                      "004": "5",
                      "003": "1",
                      "002": "17"
                  },
                  {
                      "000": "20210506050000",
                      "001": "00",
                      "004": "5",
                      "003": "0",
                      "002": "16"
                  },
                  {
                      "000": "20210506060000",
                      "001": "00",
                      "004": "5",
                      "003": "0",
                      "002": "17"
                  },
                  {
                      "000": "20210506070000",
                      "001": "00",
                      "004": "6",
                      "003": "0",
                      "002": "18"
                  },
                  {
                      "000": "20210506080000",
                      "001": "00",
                      "004": "5",
                      "003": "0",
                      "002": "19"
                  },
                  {
                      "000": "20210506090000",
                      "001": "00",
                      "004": "6",
                      "003": "0",
                      "002": "21"
                  },
                  {
                      "000": "20210506100000",
                      "001": "00",
                      "004": "7",
                      "003": "2",
                      "002": "23"
                  }
              ]
          }
      }
  },
  "observe": {
      "101010100": {
          "1001002": {
              "006": "0",
              "000": "11:05",
              "001": "00",
              "005": "13",
              "004": "8",
              "003": "3",
              "007": "1008",
              "002": "21"
          }
      }
  },
  "alarm": {
      "101010100": {
          "1001003": [
            //   {
            //       "006": "00",
            //       "010": "202105031635545112大风白色",
            //       "008": "2021-05-03 16:35",
            //       "011": "10101-20210503163532-0501.html",
            //       "012": "北京市发布大风白色预警",
            //       "009": "市气象台2021年5月3日16时35分发布大风蓝色预警信号：受冷空气影响，预计5月4日02时至23时，本市大部分地区有4、5级偏北风，阵风7、8级，请注意防范。（预警信息来源：国家预警信息发布中心）",
            //       "001": "北京市",
            //       "005": "大风",
            //       "004": "05",
            //       "003": "",
            //       "007": "白色",
            //       "002": ""
            //   },
            //   {
            //       "006": "01",
            //       "010": "202105031635545112大风蓝色",
            //       "008": "2021-05-03 16:35",
            //       "011": "10101-20210503163532-0501.html",
            //       "012": "北京市发布大风蓝色预警",
            //       "009": "市气象台2021年5月3日16时35分发布大风蓝色预警信号：受冷空气影响，预计5月4日02时至23时，本市大部分地区有4、5级偏北风，阵风7、8级，请注意防范。（预警信息来源：国家预警信息发布中心）",
            //       "001": "北京市",
            //       "005": "大风",
            //       "004": "05",
            //       "003": "",
            //       "007": "蓝色",
            //       "002": ""
            //   },
              {
                  "006": "02",
                  "010": "202105031635545112大风黄色",
                  "008": "2021-05-03 16:35",
                  "011": "10101-20210503163532-0501.html",
                  "012": "北京市发布大风黄色预警",
                  "009": "市气象台2021年5月3日16时35分发布大风蓝色预警信号：受冷空气影响，预计5月4日02时至23时，本市大部分地区有4、5级偏北风，阵风7、8级，请注意防范。（预警信息来源：国家预警信息发布中心）",
                  "001": "北京市",
                  "005": "大风",
                  "004": "05",
                  "003": "",
                  "007": "黄色",
                  "002": ""
              },
            //   {
            //       "006": "03",
            //       "010": "202105031635545112大风橙色",
            //       "008": "2021-05-03 16:35",
            //       "011": "10101-20210503163532-0501.html",
            //       "012": "北京市发布大风橙色预警",
            //       "009": "市气象台2021年5月3日16时35分发布大风蓝色预警信号：受冷空气影响，预计5月4日02时至23时，本市大部分地区有4、5级偏北风，阵风7、8级，请注意防范。（预警信息来源：国家预警信息发布中心）",
            //       "001": "北京市",
            //       "005": "大风",
            //       "004": "05",
            //       "003": "",
            //       "007": "橙色",
            //       "002": ""
            //   },
              {
                  "006": "04",
                  "010": "202105031635545112大风红色",
                  "008": "2021-05-03 16:35",
                  "011": "10101-20210503163532-0501.html",
                  "012": "北京市发布大风红色预警",
                  "009": "市气象台2021年5月3日16时35分发布大风蓝色预警信号：受冷空气影响，预计5月4日02时至23时，本市大部分地区有4、5级偏北风，阵风7、8级，请注意防范。（预警信息来源：国家预警信息发布中心）",
                  "001": "北京市",
                  "005": "大风",
                  "004": "05",
                  "003": "",
                  "007": "红色",
                  "002": ""
              },
          ]
      }
  }
};
let templateArea = "101010100";

function getDeepCopiedData(){
  return JSON.parse(JSON.stringify(mockDataTemplate));
}
let genMockDataForArea = function(param){
  let areaCode = param.area;
  let data = getDeepCopiedData();
  let now = moment();
  let startOf12 = now.hour() < 8 ?  moment().subtract(1, 'days').hour(20):moment().hour(8);
  let startOf1 = moment();

  data.forecast['12h'][areaCode] = data.forecast['12h'][templateArea];
  if(areaCode !== templateArea){
    delete data.forecast['12h'][templateArea];
  }
  let dataOf12  = data.forecast['12h'][areaCode]["1001001"];
  for(let i=0;i<dataOf12.length;i++){
    let endOf12 = moment(startOf12).add(12, 'hours');
     //  "000": "20210504080000~20210504200000",
    dataOf12[i]["000"] = `${startOf12.format("YYYYMMDDHH")}0000~${endOf12.format("YYYYMMDDHH")}0000`;
    startOf12 = moment(endOf12);
  }

  data.forecast['1h'][areaCode] = data.forecast['1h'][templateArea];
  if(areaCode !== templateArea){
    delete data.forecast['1h'][templateArea];
  }
  let dataOf1  = data.forecast['1h'][areaCode]["1001001"];
  for(let i=0;i<dataOf1.length;i++){
     //  "000": "20210504080000~20210504200000",
    dataOf1[i]["000"] = `${startOf1.format("YYYYMMDDHH")}0000`;
    startOf1.add(1,'hours');
  }

  data.alarm[areaCode] = data.alarm[templateArea];

  if(areaCode !== templateArea){
    delete data.alarm[templateArea];
  }

  return data;
}

module.exports = {
  genMockDataForArea
}
import {Cache,setCacheData,getCachedData} from "./cache"
import {weather,isNotGood} from "./code-dic";
const enableCache = true; //是否开启请求缓存
const cacheTime = 3600 * 2; //2个小时的缓存（天气信息没有必要频繁刷新）

const key = "dc56d448cb406e502dfaeec4db50c340"; //sk号码
const apiPrefix = "https://api.weatherdt.com/";

import {  genMockDataForArea } from "./mock";

const EVERY_HOUR = {
  url:`common/?`,
  method:"GET",
  mocker:genMockDataForArea, //如果不注释该字段，则自动使用Mocker获取数据
  params:{
    area:"",
    type:"forecast|observe|alarm"
  }
};

function callWeatherAPi(apiOption,inputData){
  let targetUrl = `${apiPrefix}${apiOption.url}`;

  let data = Object.assign(JSON.parse(JSON.stringify(apiOption.params)),inputData);
  data.key = key;

  // console.log(`callWeatherAPi:${targetUrl}`)
  // console.log('data=')
  // console.log(data);

  let cacheKey = "";
  return new Promise((resolve, reject) => {
    // 如果接口被mock,则直接返回mock数据
    if(apiOption.mocker){
      let res = {
        statusCode: 200 ,
        data:apiOption.mocker(data)
      }
      return resolve(res);
    }
    //如果开启缓存，则检查缓存
    if(enableCache){
      cacheKey = JSON.stringify(data)+targetUrl;
      // console.log(`cacheKey = ${cacheKey}`)
      let d = getCachedData(cacheKey);
      if(d !== undefined){
        // console.log('return cache from memory: '+cacheKey)
        return resolve(d);
      }
    }
    
    wx.request({
      url: targetUrl,
      data,
      method:apiOption.method,
      success(res) {
        //天气网数据返回有forecast字段，有就代表正常返回
        if(res && res.statusCode === 200 && res.data && res.data.forecast !== undefined){
          // 如果开启缓存，则缓存结果
          if(enableCache){
            // console.log('set cache for '+cacheKey)
            setCacheData(cacheKey,res,cacheTime);
          }
          res._reqData = inputData;
          resolve(res);
        }else{
          reject({
            res,
            msg: '请求成功，接口响应失败',
            url: targetUrl,
            method:apiOption.method
          });
        }
      },
      fail() {
        reject({
          msg: '请求失败',
          url: targetUrl,
          method:apiOption.method
        });
      }
    });
  });
}

let responseParser = {
  parseCityInterface:function(data){
    let ret ={};
    try{
      let keys = Object.keys(data.forecast["12h"]);
      ret.adcode = keys[0];
      ret["12h"] = data.forecast["12h"][keys[0]]["1001001"].map((item,index)=>{
        let tm = item["000"].split("~");
        return {
          timeBegin:tm[0],
          timeEnd:tm[1],
          weather:item["001"],
          maxTemp:item["002"],
          minTemp:item["003"],
          windPower:item["004"],
          windDirection:item["005"]
        }
      });

      ret["1h"] = data.forecast["1h"][keys[0]]["1001001"].map((item,index)=>{
        return {
          time:item["000"],
          weather:item["001"],
          temp:item["002"],
          windPower:item["003"],
          windDirection:item["004"]
        }
      });

      ret.alarm = data.alarm[keys[0]]["1001003"].map((item,index)=>{
        return {
          province:item["001"],
          city:item["002"],
          district:item["003"],
          alarmTypeCode:item["004"],
          alarmTypeName:item["005"],
          alarmLevel:item["006"],
          alarmLevelName:item["007"],
          alarmTime:item["008"],
          content:item["009"],
          title:item["010"],
          linkAddress:item["011"],
        }
      }); // 空数组代表无警报信息

    }catch(e){
      console.error(`获取城市天气失败！`);
      console.log(data);
      console.error(e);
      ret = undefined;
    }

    return ret;
  },

}
module.exports = {
  callWeatherAPi,
  responseParser,
  apis:{
    EVERY_HOUR
  },
  isNotGood,
  weatherCodes:{
    weather
  }
}
// app.js
App({
  onLaunch() {
    // 展示本地存储能力
    const logs = wx.getStorageSync('logs') || []
    logs.unshift(Date.now())
    wx.setStorageSync('logs', logs)

    // 登录
    wx.login({
      success: res => {
        // 发送 res.code 到后台换取 openId, sessionKey, unionId
      }
    })
  },
  globalData: {
    userInfo: null,
    currentRouteData:undefined
  }
})

import {cityData,findCityInfo} from './city-data.js'
import hotCity from './hot-city.js'
import {callBaiduMapAPI,apis} from '../../libs/baidu-map/webapi-sdk';

Page({
    data: {
        hotCity:hotCity,
        range: [[], [], []],
        multiIndex: [0, 0, 0],
        chosenCity: {
            province: '',
            city: '',
            district: '',
            code: '',
            longitude: '', //可空
            latitude: '', //可空
        },
        currentLocation: '',
        type: '',
    },
    onLoad: function (options) {
      // console.log(hotCity);
        this.setData({type:options.type})
        this.setProvinceList()
        this.setChosenData();
        //TODO:判断缓存是否有当前位置，如果有，则直接获取并展示

        //如果没有，则调用定位接口：
        this.getLocation();
    },
    
  bindMultiPickerChange: function (e) {
    console.log('picker发送选择改变，携带值为', e.detail.value);
    this.setData({multiIndex:e.detail.value});
    //根据确定的选项刷新选择的值
    this.setChosenData();
    
  },
  setChosenData:function(){
    console.log('setChosenData')
    let [provinceIndex,cityIndex,regionIndex] = this.data.multiIndex;
    let province = this.data.range[0][provinceIndex];
    let city = this.data.range[1][cityIndex];
    let district = this.data.range[2][regionIndex];
    console.log(cityData)
    console.log(province)
    console.log(city)
    console.log(district)
    // console.log(district)
    let code = cityData[province][city][district].AREAID;

    this.setData({
      chosenCity:{
        province: province,
        city: city,
        district: district,
        code: code,
      }
    })

  },
  bindMultiPickerColumnChange: function (e) {
    console.log('修改的列为', e.detail.column, '，值为', e.detail.value);
    if(e.detail.column === 0){
      //更新城市列表
      console.log('更新城市列表')
      const province = this.data.range[0][e.detail.value]
      this.data.chosenCity.province = province;
      this.setCityList(province);
    }else if(e.detail.column === 1){
      //更新地区列表
      console.log('更新地区列表')
      const city = this.data.range[1][e.detail.value]
      this.data.chosenCity.city = city;
      this.setRegionList(this.data.chosenCity.province,city);
    }else if(e.detail.column === 2){
      const province = this.data.chosenCity.province
      const city = this.data.chosenCity.city
      const districtObj = cityData[province][city]

      console.log(province)
      console.log(city)
      console.log(districtObj)

      const districtList = Object.keys(districtObj)
      const district = districtList[e.detail.value]
      this.data.chosenCity.district = district
      this.data.chosenCity.code = districtObj[district]['AREAID']
    }
    // console.log(this.data.chosenCity);
   
  },

    setProvinceList() {
      console.log('setProvinceList')
        const provinceList = Object.keys(cityData);
        this.setData({"range[0]": provinceList});
        this.data.chosenCity.province = provinceList[0];

        this.setCityList(provinceList[0]);
    },
    setCityList(provinceName){
      console.log(`setCityList:${provinceName}`)
      const cityList = Object.keys(cityData[provinceName]);
      this.setData({"range[1]": cityList});
      this.data.chosenCity.city = cityList[0];
      this.setRegionList(provinceName,cityList[0]);
    },
    setRegionList(provinceName,cityName){
      console.log(`setRegionList:${provinceName},${cityName}`)
      const regionList = Object.keys(cityData[provinceName][cityName]);
      this.setData({"range[2]": regionList});
      this.data.chosenCity.district = regionList[0];
    },
    async getLocation() {

        wx.getLocation({
            type: 'gcj02',
            altitude: true,
            success: async res => {
              console.log('获取定位：');
              console.log(res);

              //调用百度地图服务进行地理位置逆解析，得到当前城市名称
              try{
                let resp = await callBaiduMapAPI(apis.REVERSE_GEOCODING,{location:`${res.latitude},${res.longitude}`})
                
                console.log('百度地图返回结果：');
                console.log(resp);

                if(resp && resp.statusCode === 200 && resp.data.status === 0){
                  this.setData({currentLocation: resp.data.result.addressComponent.city})

                  let foundCity = findCityInfo(resp.data.result.addressComponent.district);
                  if(foundCity === undefined){
                    foundCity = findCityInfo(resp.data.result.addressComponent.city);
                  }
                  foundCity.longitude = res.longitude;
                  foundCity.latitude = res.latitude;
                  this.setData({
                    chosenCity:foundCity
                  })
                  //TODO:更新本地缓存的位置信息

                  wx.showToast({ title: '已经根据当前位置刷新您所在的城市！' })
                }else{
                  wx.showToast({ title: '获取失败' })
                }
              }catch(e){
                // this.setData('currentLocation', '定位失败')
                // wx.showToast({ title: '获取失败' })
                console.error(e);
              }


                // const currentLocation = `${res.province} ${res.city} ${res.district}`
                // this.setData('currentLocation', currentLocation)
            },
            fail: err => {
                this.setData('currentLocation', '定位失败')
                wx.showToast({ title: '获取失败' })
                console.error(err);
            },
        })
    },
    // change(event) {
    //     const value = event.detail.value
    //     if (value.length === 1) {
    //         const province = this.data.range[0][value[0]].NAMECN
    //         this.data.chosenCity.province = province
    //         const cityList = Object.keys(cityData[province]).map(key => ({
    //             NAMECN: key,
    //         }))
    //         this.setData('range[1]', cityList)
    //     } else if (value.length === 2) {
    //         const province = this.data.range[0][value[0]].NAMECN
    //         const city = this.data.range[1][value[1]].NAMECN
    //         this.data.chosenCity.city = city
    //         const countyList = Object.keys(
    //             cityData[province][city]
    //         ).map(key => ({ NAMECN: key }))
    //         this.setData('range[2]', countyList)
    //     } else {
    //         const province = this.data.chosenCity.province
    //         const city = this.data.chosenCity.city
    //         const districtObj = cityData[province][city]
    //         const districtList = Object.keys(districtObj)
    //         const district = districtList[value[2]]
    //         this.data.chosenCity.district = district
    //         this.data.chosenCity.code = districtObj[district]['AREAID']
    //     }
    // },
    finishChoosing() {
        const CurrentPages = getCurrentPages()
        const lastPage = CurrentPages[CurrentPages.length - 2]
        if (this.data.type === 'd') {
            lastPage.setData({'destination': this.data.chosenCity})
        } else if (this.data.type === 's') {
            lastPage.setData({'startingPlace': this.data.chosenCity})
        }
        wx.navigateBack()
    },
    chooseCity(e) {
        const CurrentPages = getCurrentPages()
        const lastPage = CurrentPages[CurrentPages.length - 2]
        const tartgetData = e.target.dataset
        if (this.data.type === 'd') {
            lastPage.setData(
              {
                destination: {
                province: '',
                city: tartgetData.name,
                district: '',
                code: tartgetData.code,
                }
              }
            )
        } else if (this.data.type === 's') {
            lastPage.setData({
              startingPlace:{
                province: '',
                city: tartgetData.name,
                district: '',
                code: tartgetData.code,
            }
          })
        }
        wx.navigateBack()
    },
})
// index.js
import {format} from '../../utils/time-util'
import {cityData,findCityInfo} from '../city/city-data'
import {callBaiduMapAPI,apis} from '../../libs/baidu-map/webapi-sdk';
import moment from "../../libs/moment/moment-wrapper"
import {
  addHistory,
  getHistoryData,
} from "../../data/query-history"
// 获取应用实例
const app = getApp()

Page({
    data: {

      range: [[], [], []],
      multiIndex: [0, 0, 0],

      range2: [[], [], []],
      multiIndex2: [0, 0, 0],

        markers:[],
        history:[],
        key:"XLJBZ-ZDTK3-PZQ3V-3AKCJ-4VWGQ-VQF3L",
        scale:7,
        longitude:0,
        latitude:0,
        startingPlace: {}, // {province: '',city: '', district: '', code: '',longitude: '',latitude: ''}
        destination: {},// {province: '',city: '', district: '', code: '',longitude: '',latitude: ''}
        date: '',
        dateText: '',
        startDate:format(new Date(),'yyyy-MM-dd'),
        endDate:format(new Date((+new Date()) + 1000*3600*24*7),'yyyy-MM-dd'), //只允许选7天内的日期（主要考虑天气接口）
        time:'',
        startTime:format(new Date(),'hh:mm'),
        // endDate:format(new Date((+new Date()) + 1000*3600*24* 2000),'yyyy-MM-dd') //给一个很大的日期选择范围
    },
    stringifyPlace(place){
        // return `${place.province?(place.province+"省"):""}${place.city}市${place.distinct?place.distinct+"区":""}`
        if(place.province === place.city){
          return `${place.city}市${place.distinct?place.distinct+"区":""}`
        }else{
          return `${place.province?(place.province+"省"):""}${place.city}市${place.distinct?place.distinct+"区":""}`
        }
    },
    async initData(){
      //根据当前坐标，查询默认出发地点
      //调用百度地图服务进行地理位置逆解析，得到当前城市名称
      try{
        let resp = await callBaiduMapAPI(apis.REVERSE_GEOCODING,{location:`${this.data.latitude},${this.data.longitude}`})
        
        console.log('百度地图返回结果：');
        console.log(resp);

        if(resp && resp.statusCode === 200 && resp.data.status === 0){
          this.setData({currentLocation: resp.data.result.addressComponent.city})

          let foundCity = findCityInfo(resp.data.result.addressComponent.district);
          if(foundCity === undefined){
            foundCity = findCityInfo(resp.data.result.addressComponent.city);
          }
          foundCity.longitude = this.data.longitude;
          foundCity.latitude = this.data.latitude;
          this.setData({
            startingPlace:foundCity
          })

          // 设置地图当前位置的marker:
          let theMarker =  {
            id: this.data.markerIdSeed++,
            latitude: this.data.latitude,
            longitude:this.data.longitude,
            zIndex: 100,
            width:16,
            height:16,
            anchor:{
                x:0.5,
                y:1,
            },
            iconPath: '../../resource/image/marker.png',
            callout: {
                display: 'ALWAYS',
                content: `您在这里！`,
                color: '#fff',
                fontSize: '16',
                borderRadius: 10,
                bgColor: '#ff221a',
                padding: 2,
                textAlign: 'center'
            }
        };
        this.data.markers.push(theMarker);
        this.setData({
          markers:this.data.markers
        })


          wx.showToast({ title: '请选择目的地',duration:900 })
        }else{
          wx.showToast({ title: '获取定位失败' ,duration:900})
        }
      }catch(e){
        // this.setData('currentLocation', '定位失败')
        // wx.showToast({ title: '获取失败' })
        console.error(e);
      }

      //设置默认出发时间为当前
      let date = moment().format("YYYY-MM-DD");
      let time = moment().format("HH:mm");
      let t = moment().format("M月D日");
      this.setData({
        date,
        dateText: t,
        time,
      });

      // 获取历史查询数据
      let history = getHistoryData();
      if(history){
        this.setData({
          history,
        })
      }

    },
    onLoad() {

      this.setProvinceList();
      this.setProvinceList2();
        wx.getLocation({
            type: 'gcj02',
            altitude: true,
            success: async res => {
              console.log('获取定位：');
              console.log(res);

              this.data.latitude = res.latitude;
              this.data.longitude = res.longitude;
              this.setData({
                latitude:res.latitude,
                longitude:res.longitude,
              });
              await this.initData();
            },
            fail: err => {
                wx.showToast({ title: '获取定位失败' })
                console.error(err);
            },
        })
    },
    onShow() {
      // 获取历史查询数据
      let history = getHistoryData();
      if(history){
        this.setData({
          history,
        })
      }
    },

    queryHistory(evt) {
      // 从点击的历史信息中获取查询参数
      console.log(evt);
      let param = this.data.history[evt.target.dataset.idx];
      wx.navigateTo({
          url: `../packageB/pages/detail-two/detail-two?from=${param.from}&fromCode=${param.fromCode}&fromLat=${param.fromLat}&fromLnt=${param.fromLnt}&to=${param.to}&toCode=${param.toCode}&toLat=${param.toLat}&toLnt=${param.toLnt}&date=${param.date}&time=${param.time}`,
          // url: `../../pkgB/pages/detail-two/detail-two?from=${param.from}&fromCode=${param.fromCode}&fromLat=${param.fromLat}&fromLnt=${param.fromLnt}&to=${param.to}&toCode=${param.toCode}&toLat=${param.toLat}&toLnt=${param.toLnt}&date=${param.date}&time=${param.time}`,
      })
    },
    
    navigateToDetailTwo() {

        //检查参数：
        if(!this.data.startingPlace.code || !this.data.destination.code || !this.data.date || !this.data.time){
          
          wx.showToast({ title: '请选择参数',icon:'error',duration:500 })
          return;
        }

        let param = {
          from:this.stringifyPlace(this.data.startingPlace),
          fromCode:this.data.startingPlace.code,
          fromLat:this.data.startingPlace.latitude||"",
          fromLnt:this.data.startingPlace.longitude||"",
          to:this.stringifyPlace(this.data.destination),
          toCode:this.data.destination.code,
          toLat:this.data.destination.latitude||"",
          toLnt:this.data.destination.longitude||"",
          date:this.data.date,
          time:this.data.time
        }
        
        addHistory(param);

        wx.navigateTo({
            url: `../packageB/pages/detail-two/detail-two?from=${param.from}&fromCode=${param.fromCode}&fromLat=${param.fromLat}&fromLnt=${param.fromLnt}&to=${param.to}&toCode=${param.toCode}&toLat=${param.toLat}&toLnt=${param.toLnt}&date=${param.date}&time=${param.time}`,
        })
    },
    chooseStartingPlace(e) {
        const type = e.currentTarget.dataset.type
        wx.navigateTo({
            url: `../city/city?type=${type}`,
        })
    },
    // 交换起止地址
    changeStartEnd(){
      this.setData({
        startingPlace:this.data.destination,
        destination:this.data.startingPlace
      })
    },
    bindDateChange: function(e) {
      let t = moment(e.detail.value).format("M月D日");
      this.setData({
        date: e.detail.value,
        dateText: t
      })
    },
    bindTimeChange: function(e) {
      this.setData({
        time: e.detail.value
      })
    },
    chooseDate() {
        // wx.navigateTo({
        //     url: '../calendar/calendar',
        // })
    },


    setProvinceList() {
      console.log('setProvinceList')
        const provinceList = Object.keys(cityData);
        this.setData({
          "range[0]": provinceList,
        });
        // this.data.currentSelect.province = provinceList[0];
        this.setCityList();
    },
    setProvinceList2() {
      console.log('setProvinceList2')
        const provinceList = Object.keys(cityData);
        this.setData({
          "range2[0]": provinceList,
        });
        // this.data.currentSelect2.province = provinceList[0];
        this.setCityList2();
    },
    // setCityList(provinceName){
    setCityList(){
      let provinceName = this.data.range[0][this.data.multiIndex[0]];
      console.log(`setCityList:${provinceName}`)
      const cityList = Object.keys(cityData[provinceName]);
      this.setData({
        "range[1]": cityList,
      });
      // this.data.currentSelect.city = cityList[0];
      this.setRegionList();
    },
    setCityList2(){
      let provinceName = this.data.range2[0][this.data.multiIndex2[0]];
      console.log(`setCityList2:${provinceName}`)
      const cityList = Object.keys(cityData[provinceName]);
      this.setData({
        "range2[1]": cityList,
        // "multiIndex2[1]": 0,
      });
      // this.data.currentSelect2.city = cityList[0];
      this.setRegionList2();
    },
    // setRegionList(provinceName,cityName){
    setRegionList(){
      let provinceName = this.data.range[0][this.data.multiIndex[0]];
      let cityName = this.data.range[1][this.data.multiIndex[1]];
      console.log(`setRegionList:${provinceName},${cityName}`)
      const regionList = Object.keys(cityData[provinceName][cityName]);
      // this.data.currentSelect.district = regionList[0];
      this.setData({
        "range[2]": regionList,
      });
    },

    setRegionList2(){
      let provinceName = this.data.range2[0][this.data.multiIndex2[0]];
      let cityName = this.data.range2[1][this.data.multiIndex2[1]];
      console.log(`setRegionList2:${provinceName},${cityName}`)
      const regionList = Object.keys(cityData[provinceName][cityName]);
      // this.data.currentSelect2.district = regionList[0];
      this.setData({
        "range2[2]": regionList,
        // "multiIndex2[2]": 0,
      });
    },


    setChosenDestination:function(){
      console.log('setChosenDestination')
      let [provinceIndex,cityIndex,regionIndex] = this.data.multiIndex;
      let province = this.data.range[0][provinceIndex];
      let city = this.data.range[1][cityIndex];
      let district = this.data.range[2][regionIndex];
      console.log(province)
      console.log(city)
      console.log(district)
      // console.log(district)
      let code = cityData[province][city][district].AREAID;
  
      this.setData({
        destination:{
          province: province,
          city: city,
          district: district,
          code: code,
        }
      })
    },
    setChosenStartingPlace:function(){
    console.log('setChosenStartingPlace')
    let [provinceIndex,cityIndex,regionIndex] = this.data.multiIndex2;
    let province = this.data.range2[0][provinceIndex];
    let city = this.data.range2[1][cityIndex];
    let district = this.data.range2[2][regionIndex];
    console.log(province)
    console.log(city)
    console.log(district)
    // console.log(district)
    let code = cityData[province][city][district].AREAID;

    this.setData({
      startingPlace:{
        province: province,
        city: city,
        district: district,
        code: code,
      }
    })
  },

  bindMultiPickerChange: function (e) {
    console.log('picker发送选择改变，携带值为', e.detail.value);
    this.setData({multiIndex:e.detail.value});
    
  },
  bindMultiPickerColumnChange: function (e) {
    console.log('修改的列为', e.detail.column, '，值为', e.detail.value);
    let k = `multiIndex[${e.detail.column}]`;
    this.setData({
        [k]: e.detail.value,
    })
    if(e.detail.column === 0){
      //更新城市列表
      console.log('更新城市列表')
      // const province = this.data.range[0][e.detail.value]
      // this.data.currentSelect.province = province;
      this.setCityList();
      // this.setCityList(province);
    }else if(e.detail.column === 1){
      //更新地区列表
      console.log('更新地区列表')
      const city = this.data.range[1][e.detail.value]
      // this.data.currentSelect.city = city;
      this.setRegionList();
      // this.setRegionList(this.data.currentSelect.province,city);
    }else if(e.detail.column === 2){
    }
  },
  bindMultiPickerChange2: function (e) {
    console.log('picker发送选择改变，携带值为', e.detail.value);
    this.setData({multiIndex2:e.detail.value});
  
    this.setChosenStartingPlace();